"use strict";(self.webpackChunkipc144=self.webpackChunkipc144||[]).push([[4962],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=o.createContext({}),i=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=i(e.components);return o.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=i(n),u=a,h=m["".concat(p,".").concat(u)]||m[u]||d[u]||r;return n?o.createElement(h,c(c({ref:t},l),{},{components:n})):o.createElement(h,c({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,c=new Array(r);c[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[m]="string"==typeof e?e:a,c[1]=s;for(var i=2;i<r;i++)c[i]=n[i];return o.createElement.apply(null,c)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9897:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>i});var o=n(7462),a=(n(7294),n(3905));n(8209);const r={id:"operations-crud-reference",title:"Operations (CRUD) Reference",sidebar_position:3,description:"Operations (CRUD) Reference"},c="Operations (CRUD) Reference",s={unversionedId:"NoSQL-Database-MongoDB/operations-crud-reference",id:"NoSQL-Database-MongoDB/operations-crud-reference",title:"Operations (CRUD) Reference",description:"Operations (CRUD) Reference",source:"@site/docs/NoSQL-Database-MongoDB/operations-crud-reference.md",sourceDirName:"NoSQL-Database-MongoDB",slug:"/NoSQL-Database-MongoDB/operations-crud-reference",permalink:"/NoSQL-Database-MongoDB/operations-crud-reference",draft:!1,editUrl:"https://github.com/patrick-crawford/WebProgrammingToolsAndFrameworks/tree/master/docs/NoSQL-Database-MongoDB/operations-crud-reference.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"operations-crud-reference",title:"Operations (CRUD) Reference",sidebar_position:3,description:"Operations (CRUD) Reference"},sidebar:"courseNotesSidebar",previous:{title:"Mongoose ODM with MongoDB",permalink:"/NoSQL-Database-MongoDB/mongoose-odm-with-mongodb"},next:{title:"Example Code",permalink:"/NoSQL-Database-MongoDB/example-code"}},p={},i=[{value:"Create",id:"create",level:2},{value:"Read",id:"read",level:2},{value:"Selecting specific fields",id:"selecting-specific-fields",level:3},{value:"Update",id:"update",level:2},{value:"Delete",id:"delete",level:2}],l={toc:i},m="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"operations-crud-reference"},"Operations (CRUD) Reference"),(0,a.kt)("p",null,"Once again, we will be discussing the four major operations typically performed on data: ",(0,a.kt)("strong",{parentName:"p"},"C"),"reate, ",(0,a.kt)("strong",{parentName:"p"},"R"),"ead, ",(0,a.kt)("strong",{parentName:"p"},"U"),"pdate and ",(0,a.kt)("strong",{parentName:"p"},"D"),"elete (",(0,a.kt)("strong",{parentName:"p"},"CRUD"),'). The operations in the code below will each work with the familiar "companySchema" using the "Company" model:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"let companySchema = new Schema({\n  companyName: String,\n  address: String,\n  phone: String,\n  employeeCount: {\n    type: Number,\n    default: 0,\n  },\n  country: String,\n});\n\nlet Company = mongoose.model('companies', companySchema);\n")),(0,a.kt)("h2",{id:"create"},"Create"),(0,a.kt)("p",null,'To "save" (create) a new document, we must first create the document in code using the model we want (ie: "Company"). Then we can call a built in method, ',(0,a.kt)("a",{parentName:"p",href:"https://mongoosejs.com/docs/models.html#constructing-documents"},'"save"')," on the new object to save it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const kwikEMart = new Company({ ... });\n\nkwikEMart.save().then(() => {\n  // everything good\n  console.log("kwikEMart saved");\n}).catch(err => {\n  // there was an error\n  console.log(err);\n});\n')),(0,a.kt)("h2",{id:"read"},"Read"),(0,a.kt)("p",null,'To "find" (read) documents from the database, we use the ',(0,a.kt)("a",{parentName:"p",href:"https://mongoosejs.com/docs/api/model.html#Model.find()"},'"find"'),' method on the model object itself (ie: "Company"), ie:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"Company.find({ companyName: 'The Kwik-E-Mart' })\n  //.sort({}) //optional \"sort\" - https://docs.mongodb.com/manual/reference/operator/aggregation/sort/\n  .exec()\n  .then((companies) => {\n    // companies will be an array of objects.\n    // Each object will represent a document that matched the query\n    console.log(companies);\n  });\n")),(0,a.kt)("h3",{id:"selecting-specific-fields"},"Selecting specific fields"),(0,a.kt)("p",null,"If we wish to limit the results to include only specific fields, we can pass the list of fields as a space-separated string in the second parameter to the find() method, ie:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"Company.find({ companyName: 'The Kwik-E-Mart' }, 'address phone')\n  //.sort({}) //optional \"sort\" - https://docs.mongodb.com/manual/reference/operator/aggregation/sort/\n  .exec()\n  .then((companies) => {\n    // companies will be an array of objects.\n    // Each object will represent a document that matched the query\n    console.log(companies);\n  });\n")),(0,a.kt)("p",null,"For complex queries (ie: ",(0,a.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/manual/reference/operator/query/gt/"},'"greater than"'),", ",(0,a.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/manual/reference/operator/query/in/"},'"in"'),", ",(0,a.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/manual/reference/operator/query/or/"},'"or"'),", etc, etc.) see the ",(0,a.kt)("a",{parentName:"p",href:"https://mongoosejs.com/docs/queries.html"},"Mongoose Query Guide")," and the MongoDB documentation under ",(0,a.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/manual/reference/operator/query/"},"Query and Projection Operators")),(0,a.kt)("h2",{id:"update"},"Update"),(0,a.kt)("p",null,"To update documents in the database, we use the ",(0,a.kt)("a",{parentName:"p",href:"https://mongoosejs.com/docs/api/model.html#Model.updateOne()"},"updateOne()"),' method on the model object (ie: "Company"). We typically pass this function two arguments: the query to select which documents to update and the fields to set for the documents that match the query.'),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"NOTE:")," See ",(0,a.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/manual/reference/operator/update/"},"update operators"),", ie: ",(0,a.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/manual/reference/operator/update/set/"},"$set"),", ",(0,a.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/manual/reference/operator/update/push/"},"$push")," and ",(0,a.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/manual/reference/operator/update/addToSet/"},"$addToSet")," for more information.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"Company.updateOne(\n  { companyName: 'The Kwik-E-Mart' }, \n  { $set: { employeeCount: 3 } }\n).exec();\n")),(0,a.kt)("h2",{id:"delete"},"Delete"),(0,a.kt)("p",null,"To delete documents in the database, we use the ",(0,a.kt)("a",{parentName:"p",href:"https://mongoosejs.com/docs/api/model.html#Model.deleteOne()"},"deleteOne()"),' method on the model object (ie: "Company").'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"Company.deleteOne({ companyName: 'The Kwik-E-Mart' })\n  .exec()\n  .then(() => {\n    // removed company\n    console.log('removed company');\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n")))}d.isMDXComponent=!0},8209:(e,t,n)=>{n(7294)}}]);