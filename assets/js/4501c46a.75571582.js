"use strict";(self.webpackChunkipc144=self.webpackChunkipc144||[]).push([[6882],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),d=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=d(r),m=a,h=u["".concat(l,".").concat(m)]||u[m]||c[m]||i;return r?n.createElement(h,o(o({ref:t},p),{},{components:r})):n.createElement(h,o({ref:t},p))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var d=2;d<i;d++)o[d]=r[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5905:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var n=r(7462),a=(r(7294),r(3905));r(8209);const i={id:"middleware",title:"Middleware",sidebar_position:2,description:"Middleware"},o="Middleware",s={unversionedId:"Advanced-Routing-Middleware/middleware",id:"Advanced-Routing-Middleware/middleware",title:"Middleware",description:"Middleware",source:"@site/docs/Advanced-Routing-Middleware/middleware.md",sourceDirName:"Advanced-Routing-Middleware",slug:"/Advanced-Routing-Middleware/middleware",permalink:"/Advanced-Routing-Middleware/middleware",draft:!1,editUrl:"https://github.com/patrick-crawford/WebProgrammingToolsAndFrameworks/tree/master/docs/Advanced-Routing-Middleware/middleware.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"middleware",title:"Middleware",sidebar_position:2,description:"Middleware"},sidebar:"courseNotesSidebar",previous:{title:"Application, Request & Response Objects",permalink:"/Advanced-Routing-Middleware/application-request-response-objects"},next:{title:"Example Code",permalink:"/Advanced-Routing-Middleware/example-code"}},l={},d=[{value:"Getting Started",id:"getting-started",level:2},{value:"Updating &quot;req&quot;",id:"updating-req",level:3},{value:"Restricting Route Access",id:"restricting-route-access",level:3},{value:"404 Errors",id:"404-errors",level:3},{value:"Types of Middleware",id:"types-of-middleware",level:2},{value:"Application-Level Middleware",id:"application-level-middleware",level:3},{value:"Router-Level Middleware",id:"router-level-middleware",level:3},{value:"Error-Handling Middleware",id:"error-handling-middleware",level:3},{value:"Built-In Middleware",id:"built-in-middleware",level:3},{value:"express.static()",id:"expressstatic",level:4},{value:"express.json()",id:"expressjson",level:4},{value:"express.urlencoded()",id:"expressurlencoded",level:4},{value:"Third-Party Middleware",id:"third-party-middleware",level:3}],p={toc:d},u="wrapper";function c(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"middleware"},"Middleware"),(0,a.kt)("p",null,"Middleware in Express refers to functions that can execute in the \u2018middle\u2019 of a request/response cycle typically before a matching route handler function is executed."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Middleware functions are functions that have access to the request object (req), the response object (res), and the next() function in the application\u2019s request-response cycle. The next() function is a function in the Express router which, when invoked, executes the middleware succeeding the current middleware."),(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"http://expressjs.com/en/guide/writing-middleware.html"},"http://expressjs.com/en/guide/writing-middleware.html"))),(0,a.kt)("p",null,"By implementing middleware, we can perform tasks such as:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'Directly modify the "req" (request) or "res" (response) objects ',(0,a.kt)("em",{parentName:"li"},"before")," processing the route (ie: ",(0,a.kt)("inlineCode",{parentName:"li"},"app.get('/', (req, res) => { ... });"),")"),(0,a.kt)("li",{parentName:"ul"},"Redirect the user or respond to requests before other routes are processed"),(0,a.kt)("li",{parentName:"ul"},"Block clients from accessing specific routes"),(0,a.kt)("li",{parentName:"ul"},"Log requests / handle logic before processing routes"),(0,a.kt)("li",{parentName:"ul"},"Respond to requests for routes that ",(0,a.kt)("em",{parentName:"li"},"do not exist"),' (ie: generate "404" errors)'),(0,a.kt)("li",{parentName:"ul"},'Handle exceptions that occur during the processing of a route handler (ie: generate "500" series errors)')),(0,a.kt)("h2",{id:"getting-started"},"Getting Started"),(0,a.kt)("p",null,"To implement middleware in our servers, we will begin by writing a simple middleware function that logs every request to the console. This function will be placed ",(0,a.kt)("strong",{parentName:"p"},"before")," any of our route handlers, ensuring that it gets executed for every request:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"app.use((req, res, next) => {\n  console.log(`Request from: ${req.get('user-agent')} [${new Date()}]`);\n  next();\n});\n")),(0,a.kt)("p",null,"Notice how we make use of the aforementioned ",(0,a.kt)("a",{parentName:"p",href:"https://expressjs.com/en/api.html#app.use"},"app.use()")," method to implement our middleware function. It looks very similar to a regular route handler, except it accepts a third parameter: ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"next")),' and (in this case) does not return anything to the client. It is because this function does not return anything to the client (ie: generate a "response"), that we must use the "next()" function - it simply calls the next middleware function, such as a route handler, ie:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"app.get('/', (req, res) => {\n  res.send('Hello World');\n});\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"NOTE"),": If we fail to invoke the ",(0,a.kt)("strong",{parentName:"p"},"next()")," function or return a response, our server will hang and the client request will timeout.")),(0,a.kt)("h3",{id:"updating-req"},'Updating "req"'),(0,a.kt)("p",null,'Let\'s continue the example by updating the "req" object in our middleware example to include a "log" property that simply stores the output of the log entry as a string. We can use this value in a subsequent route handler and send it back to the client, ie:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"app.use((req, res, next) => {\n  let loggedItem = `Request from: ${req.get('user-agent')} [${new Date()}]`;\n  console.log(loggedItem);\n  req.log = loggedItem;\n  next();\n});\n\napp.get('/', (req, res) => {\n  res.send(`Hello - ${req.log}`);\n});\n")),(0,a.kt)("h3",{id:"restricting-route-access"},"Restricting Route Access"),(0,a.kt)("p",null,"Another common use for middleware is to ",(0,a.kt)("strong",{parentName:"p"},"restrict")," route access for a specific route. This can be be accomplished by placing your middleware function as a ",(0,a.kt)("em",{parentName:"p"},"parameter")," to the route handling function that requires restricted access. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"function randomDeny(req, res, next) {\n  let allowed = Math.floor(Math.random() * 2); // 0 or 1\n\n  if (allowed) {\n    next();\n  } else {\n    res.status(403).send('Access Denied');\n  }\n}\n\napp.get('/secure', randomDeny, (req, res) => {\n  res.send('Welcome!');\n});\n")),(0,a.kt)("p",null,'Here, we have implemented our middleware function as "randomDeny", which randomly generates either a 0 or 1. If a 1 is generated, the "next()" function is invoked, allowing the route to be processed as normal. However, if a 0 is generated, a response, including the ',(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403"},"403 - Forbidden"),' error code is generated, informing the user that they do not have access (we could also redirect them to a "login" or "register" page, etc).'),(0,a.kt)("p",null,'To ensure that this middleware function only affects the "/secure" route, we place it as the second parameter ',(0,a.kt)("em",{parentName:"p"},"before")," the callback function."),(0,a.kt)("h3",{id:"404-errors"},"404 Errors"),(0,a.kt)("p",null,'As a final example of how to implement middleware in our server.js code - let\'s create a custom "404" error to send to the client if it has requested an unknown route (ie: a route that we have not created a handler for):'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// Other route handlers, middleware, etc ...\n\napp.use((req, res, next) => {\n  res.status(404).send(\"404 - We're unable to find what you're looking for.\");\n});\n\n// app.listen()\n")),(0,a.kt)("p",null,'Here, we have created a middleware function using the familiar "use()" function. However, the main difference is where it is placed, ie: ',(0,a.kt)("em",{parentName:"p"},"below")," all of our other middleware functions / route handlers. By placing it in this way, we can ensure that it ",(0,a.kt)("em",{parentName:"p"},"only")," gets executed if none of the other route handlers return a response to the client."),(0,a.kt)("h2",{id:"types-of-middleware"},"Types of Middleware"),(0,a.kt)("p",null,"Now that we have seen how middleware is typically implemented within an Express application, let's quickly review the 5 types of middleware available:"),(0,a.kt)("h3",{id:"application-level-middleware"},"Application-Level Middleware"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"http://expressjs.com/en/guide/using-middleware.html#middleware.application"},"Application-level middleware")," is bound to your entire application and can run when every request comes in or only when it matches a specified route."),(0,a.kt)("p",null,'In the examples above, we have implemented "Application-level middleware".'),(0,a.kt)("h3",{id:"router-level-middleware"},"Router-Level Middleware"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"http://expressjs.com/en/guide/using-middleware.html#middleware.router"},"Router-level middleware"),' works the same way as application middleware but is attached to a separate router instance. Essentially, instead of "app.use()", a separate ',(0,a.kt)("inlineCode",{parentName:"p"},"express.Router()")," instance is created and the middleware is applied to it, ie:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const userRouter = express.Router();\n\nuserRouter.use((req, res, next) => {\n  console.log('userRouter Middleware!');\n  next();\n});\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"For more information on express.Router(), see the official documentation in the official Express ",(0,a.kt)("a",{parentName:"p",href:"https://expressjs.com/en/guide/routing.html"},"Routing")," documentation.")),(0,a.kt)("h3",{id:"error-handling-middleware"},"Error-Handling Middleware"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"http://expressjs.com/en/guide/using-middleware.html#middleware.error-handling"},"Error-handling middleware"),' is defined with 4 parameters in the callback function, ie: (err, req, res, next). We must specify all 4 parameters so that express can differentiate it from a regular middleware function. Error handling middleware is invoked either when a regular middleware function calls next(err) instead of next(), or when exceptions occur in your route handlers. Like our "404" example above, error handling middleware should be placed ',(0,a.kt)("em",{parentName:"p"},"below")," your route handlers. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"app.get('/error-test', (req, res) => {\n  throw new Error('Error Test');\n});\n\napp.use((err, req, res, next) => {\n  res.status(500).send(`500 - ${err.message}`);\n});\n")),(0,a.kt)("h3",{id:"built-in-middleware"},"Built-In Middleware"),(0,a.kt)("p",null,"There are three types of ",(0,a.kt)("a",{parentName:"p",href:"http://expressjs.com/en/guide/using-middleware.html#middleware.built-in"},"built-in middleware")," functions available for us to use:"),(0,a.kt)("h4",{id:"expressstatic"},"express.static()"),(0,a.kt)("p",null,'This is what we used when sending "static" files (ie: "css" files, images, etc) in the ',(0,a.kt)("a",{parentName:"p",href:"/Web-Server-Introduction/simple-web-server-using-expressjs#css--images"},'"CSS & Images"'),' section of the "Simple Web Server using Express.js" notes, ie:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"app.use(express.static('public'));\n")),(0,a.kt)("h4",{id:"expressjson"},"express.json()"),(0,a.kt)("p",null,'This is used to parse "JSON" formatted payloads, and make the result available on the "req" object. For example:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"app.use(express.json());\n\napp.post('/json-test', (req, res) => {\n  res.send(req.body);\n});\n")),(0,a.kt)("h4",{id:"expressurlencoded"},"express.urlencoded()"),(0,a.kt)("p",null,'This is nearly identical to "express.json", except this is used to parse data from a web form using the default "enctype", (ie: "application/x-www-form-urlencoded").'),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"NOTE:"),' The \u201cextended\u201d option utilizes the "qs" library which enables rich objects and arrays to be encoded into the URL-encoded format, allowing for a JSON-like experience with URL-encoded. For more information, please see the ',(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.org/package/qs#readme"},"qs library"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"app.use(express.urlencoded({ extended: true }));\n\napp.post('/urlencoded-test', (req, res) => {\n  res.send(req.body);\n});\n")),(0,a.kt)("h3",{id:"third-party-middleware"},"Third-Party Middleware"),(0,a.kt)("p",null,"Since Express 4.x, previously included middleware that did common things such as handle cookies, or handle file uploads, have been moved to individual ",(0,a.kt)("a",{parentName:"p",href:"https://expressjs.com/en/guide/using-middleware.html#middleware.third-party"},"third-party middleware")," packages."),(0,a.kt)("p",null,"For example, parsing cookies requires the installation of ",(0,a.kt)("a",{parentName:"p",href:"https://expressjs.com/en/resources/middleware/cookie-parser.html"},"cookie-parser"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm install cookie-parser\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const cookieParser = require('cookie-parser');\n\n// load the cookie-parsing middleware\napp.use(cookieParser());\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"For a list of supported, third party middleware, refer to the ",(0,a.kt)("a",{parentName:"p",href:"http://expressjs.com/en/resources/middleware.html"},"official documentation"),".")))}c.isMDXComponent=!0},8209:(e,t,r)=>{r(7294)}}]);