"use strict";(self.webpackChunkOERTemplate=self.webpackChunkOERTemplate||[]).push([[6931],{3227:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"Managing-State-Information/introduction-to-client-sessions","title":"Introduction to \\"Client Sessions\\"","description":"Introduction to \\"Client Sessions\\"","source":"@site/docs/Managing-State-Information/introduction-to-client-sessions.md","sourceDirName":"Managing-State-Information","slug":"/Managing-State-Information/introduction-to-client-sessions","permalink":"/WebProgrammingToolsAndFrameworks/Managing-State-Information/introduction-to-client-sessions","draft":false,"unlisted":false,"editUrl":"https://github.com/catherine-leung/OERTemplate/tree/main/docs/Managing-State-Information/introduction-to-client-sessions.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"introduction-to-client-sessions","title":"Introduction to \\"Client Sessions\\"","sidebar_position":2,"description":"Introduction to \\"Client Sessions\\""},"sidebar":"courseNotesSidebar","previous":{"title":"Key Terminology","permalink":"/WebProgrammingToolsAndFrameworks/Managing-State-Information/key-terminology"},"next":{"title":"Example Code","permalink":"/WebProgrammingToolsAndFrameworks/Managing-State-Information/example-code"}}');var t=n(4848),r=n(8453);const o={id:"introduction-to-client-sessions",title:'Introduction to "Client Sessions"',sidebar_position:2,description:'Introduction to "Client Sessions"'},a='Introduction to "Client Sessions"',l={},d=[{value:"The &quot;client-sessions&quot; Library",id:"the-client-sessions-library",level:2},{value:"Middleware",id:"middleware",level:3},{value:"Testing",id:"testing",level:3},{value:"Practical Application",id:"practical-application",level:2},{value:"Routes",id:"routes",level:3},{value:"Templates",id:"templates",level:3},{value:"Middleware",id:"middleware-1",level:3},{value:"Route Updates (Logic)",id:"route-updates-logic",level:3}];function c(e){const s={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"introduction-to-client-sessions",children:'Introduction to "Client Sessions"'})}),"\n",(0,t.jsx)(s.p,{children:'We have established that there are multiple benefits to storing "session" data on the client in an encrypted cookie:'}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"The data is always available, regardless of which machine is serving a user"}),"\n",(0,t.jsx)(s.li,{children:"There is no state to manage on servers"}),"\n",(0,t.jsx)(s.li,{children:"Nothing needs to be replicated between the web servers"}),"\n",(0,t.jsx)(s.li,{children:"New web servers can be added instantly"}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"https://hacks.mozilla.org/2012/12/using-secure-client-side-sessions-to-build-simple-and-scalable-node-js-applications-a-node-js-holiday-season-part-3/",children:'"Using secure client-side sessions to build simple and scalable Node.JS applications" '})}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["Additionally, we have seen that this technology is widely tested and has been made available via the ",(0,t.jsx)(s.a,{href:"https://github.com/mozilla/node-client-sessions",children:'"client sessions"'})," Node library. In the following sections, we will see how we can implement and test this library in our servers."]}),"\n",(0,t.jsx)(s.h2,{id:"the-client-sessions-library",children:'The "client-sessions" Library'}),"\n",(0,t.jsxs)(s.p,{children:['The "client-sessions" library is available on ',(0,t.jsx)(s.a,{href:"https://www.npmjs.com/package/client-sessions",children:"NPM"})," and can be included in our project using the familiar steps to install:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"npm install client-sessions\n"})}),"\n",(0,t.jsx)(s.p,{children:"and 'require' it in our code"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:"const clientSessions = require('client-sessions');\n"})}),"\n",(0,t.jsx)(s.h3,{id:"middleware",children:"Middleware"}),"\n",(0,t.jsx)(s.p,{children:'Once we have a reference to "clientSessions", we register it as middleware and configure it using the "cookieName", "secret", "duration" and "activeDuration" properties:'}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-javascript",children:"app.use(\n  clientSessions({\n    cookieName: 'session', // this is the object name that will be added to 'req'\n    secret: 'o6LjQ5EVNC28ZgK64hDELM18ScpFQr', // this should be a long un-guessable string.\n    duration: 2 * 60 * 1000, // duration of the session in milliseconds (2 minutes)\n    activeDuration: 1000 * 60, // the session will be extended by this many ms each request (1 minute)\n  })\n);\n"})}),"\n",(0,t.jsx)(s.h3,{id:"testing",children:"Testing"}),"\n",(0,t.jsx)(s.p,{children:"To ensure that clientSessions is working properly, add the following simple routes and start the server:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:"app.get('/session-test-add', (req, res) => {\n  req.session.message = req.query.message || ''; // add a \"message\" property to the session\n  res.send(\"session created with using 'message' query parameter\");\n});\n\napp.get('/session-test-read', (req, res) => {\n  res.send(`session message: ${req.session.message}`); // read the \"message\" property from the session\n});\n"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:'When you navigate to the "/session-test-add" route with a "message" query parameter, ie:'}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"/session-test-add?message=Hello World!\n"})}),"\n",(0,t.jsxs)(s.p,{children:["You should see that a ",(0,t.jsx)(s.strong,{children:'"Set Cookie"'})," header was sent in the response with a value that should look like the following:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"session=25uFcTuHZzZlSWntEs-Kzg.D96gsJqB0lLKj4DBZsc3KSj4Z4_76pkoCy4uXUqgS1C4uuHbaxMZ6l9dTCWu-ijc.1692988779453.120000.FprcH5eIT-o6Iedv-vP2i0P8HmzCRMXGdm813oveVBc; path=/; expires=Fri, 25 Aug 2023 18:41:40 GMT; httponly\n"})}),"\n",(0,t.jsx)(s.p,{children:"This confirms that our session value was indeed encrypted and sent to the client."}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"To test whether or not our server can read it, navigate to the other route:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"/session-test-read\n"})}),"\n",(0,t.jsxs)(s.p,{children:['You should see the response text: "session message: Hello World!". Additionally, you should see that a ',(0,t.jsx)(s.strong,{children:'"Cookie"'})," header was sent in the request with a value like:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"session=AqnLAnL7dqAr9QqXnpD5Xw.wcCqiCvVSRgllI1mLOAC9yHmjjLygsur7AQaKX50_9vkugEnTKhhz3V4U8V_xgFa.1692989253302.120000.kCRDEuDgPpEuEsuEVF-2vR3vKILSPluM8tyaghTnYCE\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"practical-application",children:"Practical Application"}),"\n",(0,t.jsxs)(s.p,{children:['We can now confirm that "client sessions" is working correctly - we are able to add values to the session, which are encrypted and sent to the client using a "cookie". As a more practical test of this technology, we will implement a simple app with a "login" view and a protected "dashboard" view that may ',(0,t.jsx)(s.strong,{children:"only"})," be accessed once the user has logged in."]}),"\n",(0,t.jsxs)(s.p,{children:["To begin, create a ",(0,t.jsx)(s.a,{href:"/Web-Server-Introduction/simple-web-server-using-expressjs",children:"simple web server using Express"}),", making sure to also install and configure EJS (see: ",(0,t.jsx)(s.a,{href:"/WebProgrammingToolsAndFrameworks/Template-Engines/ejs-embedded-javaScript-templates",children:'"Template Engines" - EJS'}),")."]}),"\n",(0,t.jsx)(s.h3,{id:"routes",children:"Routes"}),"\n",(0,t.jsx)(s.p,{children:"The server should have three routes:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:'GET "/login"'}),' - renders a "login.ejs" file with an empty "message"']}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:"app.get('/login', (req, res) => {\n  res.render('login', { message: '' });\n});\n"})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:'POST "/login"'}),' - renders a "/login.ejs" file with an "invalid login" message']}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:"app.post('/login', (req, res) => {\n  res.render('login', { message: 'invalid login' });\n});\n"})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:'GET "/dashboard"'}),' - renders a "dashboard.ejs" file with a "user" object from the session']}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:"app.get('/dashboard', (req, res) => {\n  res.render('dashboard', { user: req.session.user });\n});\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"templates",children:"Templates"}),"\n",(0,t.jsxs)(s.p,{children:['Next, we must create our two EJS template files: "login.ejs" and "dashboard.ejs" in a ',(0,t.jsx)(s.strong,{children:"views"})," directory:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"views/login.ejs"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Login</title>\n  </head>\n  <body>\n    <h1>Log In</h1>\n    <hr />\n    <br />\n    <form method="post" action="/login">\n      <input type="text" placeholder="User Name" name="userName" />\n      <input type="password" placeholder="Password" name="password" />\n      <button type="submit">Log In</button>\n    </form>\n    <br />\n    <%= message %>\n  </body>\n</html>\n'})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"views/dashboard.ejs"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Dashboard</title>\n  </head>\n  <body>\n    <h1>Dashboard</h1>\n    <hr />\n    <br />\n    <h3>Hello <%= user.userName %></h3>\n    <p>Welcome to your dashboard</p>\n    <p>Here is the information we have on file for you:</p>\n    <h4>userName: <%= user.userName %></h4>\n    <h4>email: <%= user.email %></h4>\n    <a href="/logout">Logout</a>\n  </body>\n</html>\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"middleware-1",children:"Middleware"}),"\n",(0,t.jsxs)(s.p,{children:["The next part of our application is the ",(0,t.jsx)(s.strong,{children:"middleware"}),". We will require:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"The built-in urlencoded middleware:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:"app.use(express.urlencoded({ extended: true }));\n"})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["The client-sessions middleware - installed using NPM and included using:",(0,t.jsx)("br",{})," ",(0,t.jsx)(s.code,{children:'const clientSessions = require("client-sessions");'})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:"app.use(\n  clientSessions({\n    cookieName: 'session', // this is the object name that will be added to 'req'\n    secret: 'o6LjQ5EVNC28ZgK64hDELM18ScpFQr', // this should be a long un-guessable string.\n    duration: 2 * 60 * 1000, // duration of the session in milliseconds (2 minutes)\n    activeDuration: 1000 * 60, // the session will be extended by this many ms each request (1 minute)\n  })\n);\n"})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Custom middleware, used to protect a route from unauthorized access:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:"function ensureLogin(req, res, next) {\n  if (!req.session.user) {\n    res.redirect('/login');\n  } else {\n    next();\n  }\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"route-updates-logic",children:"Route Updates (Logic)"}),"\n",(0,t.jsxs)(s.p,{children:["The final piece of our application is to add some ",(0,t.jsx)(s.em,{children:"logic"}),' to our routes. Specifically, we should add logic to validate the userName / password combination against a predefined (hard-coded) user. If the user is authenticated, a session should be created which gives them access to the "dashboard" route.']}),"\n",(0,t.jsx)(s.p,{children:'To begin, let\'s add our "ensureLogin" middleware function to the "/dashboard" route to prevent unauthorized access:'}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:"app.get('/dashboard', ensureLogin, (req, res) => {\n  res.render('dashboard', { user: req.session.user });\n});\n"})}),"\n",(0,t.jsx)(s.p,{children:'Next, we will update our POST "/login" route to authenticate the "userName" and "password" values from the login form against a mock user. If the credentials match, create a session for the user, otherwise re-render the "login" template with the error message.'}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:"app.post('/login', (req, res) => {\n  let mockUser = {\n    userName: 'sampleuser',\n    password: 'samplepassword',\n    email: 'sampleuser@example.com',\n  };\n\n  if (req.body.userName == mockUser.userName && req.body.password == mockUser.password) {\n    req.session.user = {\n      userName: mockUser.userName,\n      email: mockUser.email,\n    };\n\n    res.redirect('/dashboard');\n  } else {\n    res.render('login', { message: 'invalid login' });\n  }\n});\n"})}),"\n",(0,t.jsxs)(s.admonition,{type:"info",children:[(0,t.jsxs)(s.p,{children:['If we also wish to implement "log out" functionality, we could ',(0,t.jsx)(s.strong,{children:"reset"})," the session with the following code:"]}),(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:"req.session.reset();\n"})})]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>a});var i=n(6540);const t={},r=i.createContext(t);function o(e){const s=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:s},e.children)}}}]);