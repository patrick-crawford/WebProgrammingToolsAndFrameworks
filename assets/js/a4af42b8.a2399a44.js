"use strict";(self.webpackChunkipc144=self.webpackChunkipc144||[]).push([[8863],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>v});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),l=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),d=r,v=u["".concat(s,".").concat(d)]||u[d]||m[d]||a;return n?o.createElement(v,c(c({ref:t},p),{},{components:n})):o.createElement(v,c({ref:t},p))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,c=new Array(a);c[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:r,c[1]=i;for(var l=2;l<a;l++)c[l]=n[l];return o.createElement.apply(null,c)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9558:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var o=n(7462),r=(n(7294),n(3905));n(8209);const a={id:"javascript-object-notation-json",title:"JavaScript Object Notation (JSON)",sidebar_position:1,description:"JavaScript Object Notation (JSON)"},c="JavaScript Object Notation (JSON)",i={unversionedId:"Web-API-Overview/javascript-object-notation-json",id:"Web-API-Overview/javascript-object-notation-json",title:"JavaScript Object Notation (JSON)",description:"JavaScript Object Notation (JSON)",source:"@site/docs/Web-API-Overview/javascript-object-notation-json.md",sourceDirName:"Web-API-Overview",slug:"/Web-API-Overview/javascript-object-notation-json",permalink:"/Web-API-Overview/javascript-object-notation-json",draft:!1,editUrl:"https://github.com/patrick-crawford/WebProgrammingToolsAndFrameworks/tree/master/docs/Web-API-Overview/javascript-object-notation-json.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"javascript-object-notation-json",title:"JavaScript Object Notation (JSON)",sidebar_position:1,description:"JavaScript Object Notation (JSON)"},sidebar:"courseNotesSidebar",previous:{title:"Example Code",permalink:"/Advanced-Routing-Middleware/example-code"},next:{title:"AJAX Review",permalink:"/Web-API-Overview/ajax-review"}},s={},l=[{value:"Converting JSON to an Object",id:"converting-json-to-an-object",level:2},{value:"Converting an Object to JSON",id:"converting-an-object-to-json",level:2},{value:"Caveats When Using JSON",id:"caveats-when-using-json",level:2},{value:"Object Instances",id:"object-instances",level:3},{value:"Functions (Methods)",id:"functions-methods",level:3}],p={toc:l},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"javascript-object-notation-json"},"JavaScript Object Notation (JSON)"),(0,r.kt)("p",null,'JSON ("JavaScript Object Notation") is a plain-text format that easily converts to a JavaScript object in memory. Essentially, JSON is a way to define an object using "Object Literal" notation, ',(0,r.kt)("strong",{parentName:"p"},"outside")," your application. Using the native JavaScript built-in ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON"},"JSON Object"),", we can preform the conversion from plain-text (JSON) to JavaScript Object (and vice-versa) easily. For example:"),(0,r.kt)("h2",{id:"converting-json-to-an-object"},"Converting JSON to an Object"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'let myJSONStr = \'{"users":[{"userId":1,"fName":"Joe","lName":"Smith"},{"userId":2,"fName":"Jeffrey","lName":"Sherman"},{"userId":3,"fName":"Shantell","lName":"McLeod"}]}\';\n\n// Convert to An Object:\nlet myObj = JSON.parse(myJSONStr);\n\n// Access the 3rd user (Shantell McLeod)\nconsole.log(myObj.users[2].fName); // Shantell\n')),(0,r.kt)("h2",{id:"converting-an-object-to-json"},"Converting an Object to JSON"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'let myObj = {\n  users: [\n    { userId: 1, fName: \'Joe\', lName: \'Smith\' },\n    { userId: 2, fName: \'Jeffrey\', lName: \'Sherman\' },\n    { userId: 3, fName: \'Shantell\', lName: \'McLeod\' },\n  ],\n};\n\nlet myJSON = JSON.stringify(myObj);\n\nconsole.log(myJSON); // Outputs: \'{"users":[{"userId":1,"fName":"Joe","lName":"Smith"},{"userId":2,"fName":"Jeffrey","lName":"Sherman"},{"userId":3,"fName":"Shantell","lName":"McLeod"}]}\'\n')),(0,r.kt)("h2",{id:"caveats-when-using-json"},"Caveats When Using JSON"),(0,r.kt)("p",null,'The JSON format works exceptionally well to "serialize" (convert an object in memory to a byte / string representation) and "deserialize" (converting back to an object in memory). However, there are certain things that cannot be encoded to JavaScript Object Notation:'),(0,r.kt)("h3",{id:"object-instances"},"Object Instances"),(0,r.kt)("p",null,'Instances of objects in memory cannot be stored in a JSON format. For example, consider the following "product" object:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let product = {\n  name: 'Pencil',\n  price: 3.95,\n  added: new Date('December 17, 1995 03:24:00'),\n};\n")),(0,r.kt)("p",null,'Since the "added" property is an instance of the ',(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"},"Date"),' object, we can invoke methods such as "toLocalStimeString()":'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"console.log(product.added.toLocaleTimeString('fr-CA')); // 03 h 24 min 00 s\n")),(0,r.kt)("p",null,"However, if we convert the product to JSON and back, we lose this ability:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// convert to JSON\nlet productJSON = JSON.stringify(product);\n\n// restore (convert to object)\nlet productFromJSON = JSON.parse(productJSON);\n\nconsole.log(productFromJSON.added.toLocaleTimeString('fr-CA')); // TypeError: productFromJSON.added.toLocaleTimeString is not a function\n")),(0,r.kt)("p",null,"This issue occurs because during the conversion to JSON, the Date object was implicitly converted to a string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "Pencil",\n  "price": 3.95,\n  "added": "1995-12-17T08:24:00.000Z"\n}\n')),(0,r.kt)("h3",{id:"functions-methods"},"Functions (Methods)"),(0,r.kt)("p",null,'Functions ("methods") that exist on the object also will not convert to JSON. For example:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let counter = {\n  current: 0,\n  increase: function () {\n    this.current++;\n  },\n};\n\nconsole.log(counter.current); // 0\ncounter.increase();\nconsole.log(counter.current); // 1\n")),(0,r.kt)("p",null,'Once again, if we attempt to convert this object to JSON and back, we lose the "increase()" function:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// convert to JSON\nlet counterJSON = JSON.stringify(counter);\n\n// restore (convert to object)\nlet counterFromJSON = JSON.parse(counterJSON);\n\nconsole.log(counterFromJSON.current); // 0\ncounterFromJSON.increase(); // TypeError: counterFromJSON.increase is not a function\n")),(0,r.kt)("p",null,'In this case, this issue occurs because during the conversion to JSON, the "increase" function was not included:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{ "current": 0 }\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"NOTE:"),' For more information on how values are "stringified", refer to the MDN documentation on ',(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#description"},'"JSON.stringify()"'))))}m.isMDXComponent=!0},8209:(e,t,n)=>{n(7294)}}]);