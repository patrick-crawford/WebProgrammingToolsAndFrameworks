"use strict";(self.webpackChunkOERTemplate=self.webpackChunkOERTemplate||[]).push([[4988],{6062:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"NoSQL-Database-MongoDB/operations-crud-reference","title":"Operations (CRUD) Reference","description":"Operations (CRUD) Reference","source":"@site/docs/NoSQL-Database-MongoDB/operations-crud-reference.md","sourceDirName":"NoSQL-Database-MongoDB","slug":"/NoSQL-Database-MongoDB/operations-crud-reference","permalink":"/WebProgrammingToolsAndFrameworks/NoSQL-Database-MongoDB/operations-crud-reference","draft":false,"unlisted":false,"editUrl":"https://github.com/catherine-leung/OERTemplate/tree/main/docs/NoSQL-Database-MongoDB/operations-crud-reference.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"operations-crud-reference","title":"Operations (CRUD) Reference","sidebar_position":3,"description":"Operations (CRUD) Reference"},"sidebar":"courseNotesSidebar","previous":{"title":"Mongoose ODM with MongoDB","permalink":"/WebProgrammingToolsAndFrameworks/NoSQL-Database-MongoDB/mongoose-odm-with-mongodb"},"next":{"title":"Example Code","permalink":"/WebProgrammingToolsAndFrameworks/NoSQL-Database-MongoDB/example-code"}}');var a=o(4848),r=o(8453);const s={id:"operations-crud-reference",title:"Operations (CRUD) Reference",sidebar_position:3,description:"Operations (CRUD) Reference"},c="Operations (CRUD) Reference",d={},i=[{value:"Create",id:"create",level:2},{value:"Read",id:"read",level:2},{value:"Selecting specific fields",id:"selecting-specific-fields",level:3},{value:"Update",id:"update",level:2},{value:"Delete",id:"delete",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"operations-crud-reference",children:"Operations (CRUD) Reference"})}),"\n",(0,a.jsxs)(n.p,{children:["Once again, we will be discussing the four major operations typically performed on data: ",(0,a.jsx)(n.strong,{children:"C"}),"reate, ",(0,a.jsx)(n.strong,{children:"R"}),"ead, ",(0,a.jsx)(n.strong,{children:"U"}),"pdate and ",(0,a.jsx)(n.strong,{children:"D"}),"elete (",(0,a.jsx)(n.strong,{children:"CRUD"}),'). The operations in the code below will each work with the familiar "companySchema" using the "Company" model:']}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"let companySchema = new Schema({\n  companyName: String,\n  address: String,\n  phone: String,\n  employeeCount: {\n    type: Number,\n    default: 0,\n  },\n  country: String,\n});\n\nlet Company = mongoose.model('companies', companySchema);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"create",children:"Create"}),"\n",(0,a.jsxs)(n.p,{children:['To "save" (create) a new document, we must first create the document in code using the model we want (ie: "Company"). Then we can call a built in method, ',(0,a.jsx)(n.a,{href:"https://mongoosejs.com/docs/models.html#constructing-documents",children:'"save"'})," on the new object to save it."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'const kwikEMart = new Company({ ... });\n\nkwikEMart.save().then(() => {\n  // everything good\n  console.log("kwikEMart saved");\n}).catch(err => {\n  // there was an error\n  console.log(err);\n});\n'})}),"\n",(0,a.jsx)(n.h2,{id:"read",children:"Read"}),"\n",(0,a.jsxs)(n.p,{children:['To "find" (read) documents from the database, we use the ',(0,a.jsx)(n.a,{href:"https://mongoosejs.com/docs/api/model.html#Model.find()",children:'"find"'}),' method on the model object itself (ie: "Company"), ie:']}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"Company.find({ companyName: 'The Kwik-E-Mart' })\n  //.sort({}) //optional \"sort\" - https://docs.mongodb.com/manual/reference/operator/aggregation/sort/\n  .exec()\n  .then((companies) => {\n    // companies will be an array of objects.\n    // Each object will represent a document that matched the query\n    console.log(companies);\n  });\n"})}),"\n",(0,a.jsx)(n.h3,{id:"selecting-specific-fields",children:"Selecting specific fields"}),"\n",(0,a.jsx)(n.p,{children:"If we wish to limit the results to include only specific fields, we can pass the list of fields as a space-separated string in the second parameter to the find() method, ie:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"Company.find({ companyName: 'The Kwik-E-Mart' }, 'address phone')\n  //.sort({}) //optional \"sort\" - https://docs.mongodb.com/manual/reference/operator/aggregation/sort/\n  .exec()\n  .then((companies) => {\n    // companies will be an array of objects.\n    // Each object will represent a document that matched the query\n    console.log(companies);\n  });\n"})}),"\n",(0,a.jsxs)(n.p,{children:["For complex queries (ie: ",(0,a.jsx)(n.a,{href:"https://docs.mongodb.com/manual/reference/operator/query/gt/",children:'"greater than"'}),", ",(0,a.jsx)(n.a,{href:"https://docs.mongodb.com/manual/reference/operator/query/in/",children:'"in"'}),", ",(0,a.jsx)(n.a,{href:"https://docs.mongodb.com/manual/reference/operator/query/or/",children:'"or"'}),", etc, etc.) see the ",(0,a.jsx)(n.a,{href:"https://mongoosejs.com/docs/queries.html",children:"Mongoose Query Guide"})," and the MongoDB documentation under ",(0,a.jsx)(n.a,{href:"https://docs.mongodb.com/manual/reference/operator/query/",children:"Query and Projection Operators"})]}),"\n",(0,a.jsx)(n.h2,{id:"update",children:"Update"}),"\n",(0,a.jsxs)(n.p,{children:["To update documents in the database, we use the ",(0,a.jsx)(n.a,{href:"https://mongoosejs.com/docs/api/model.html#Model.updateOne()",children:"updateOne()"})," / ",(0,a.jsx)(n.a,{href:"https://mongoosejs.com/docs/api/model.html#Model.updateMany()",children:"updateMany()"}),' methods on the model object (ie: "Company"). We typically pass these function two arguments: the query to select which documents to update and the fields to set for the documents that match the query.']}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["See ",(0,a.jsx)(n.a,{href:"https://docs.mongodb.com/manual/reference/operator/update/",children:"update operators"}),", ie: ",(0,a.jsx)(n.a,{href:"https://docs.mongodb.com/manual/reference/operator/update/set/",children:"$set"}),", ",(0,a.jsx)(n.a,{href:"https://docs.mongodb.com/manual/reference/operator/update/push/",children:"$push"})," and ",(0,a.jsx)(n.a,{href:"https://docs.mongodb.com/manual/reference/operator/update/addToSet/",children:"$addToSet"})," for more information."]})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"Company.updateOne( { companyName: 'The Kwik-E-Mart' }, { $set: { employeeCount: 3 } })\n  .exec()\n  .then(() => {\n    // updated company\n    console.log('updated company');\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n"})}),"\n",(0,a.jsx)(n.h2,{id:"delete",children:"Delete"}),"\n",(0,a.jsxs)(n.p,{children:["To delete documents in the database, we use the ",(0,a.jsx)(n.a,{href:"https://mongoosejs.com/docs/api/model.html#Model.deleteOne()",children:"deleteOne()"})," / ",(0,a.jsx)(n.a,{href:"https://mongoosejs.com/docs/api/model.html#Model.deleteMany()",children:"deleteMany()"}),' methods on the model object (ie: "Company").']}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"Company.deleteOne({ companyName: 'The Kwik-E-Mart' })\n  .exec()\n  .then(() => {\n    // removed company\n    console.log('removed company');\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>c});var t=o(6540);const a={},r=t.createContext(a);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);