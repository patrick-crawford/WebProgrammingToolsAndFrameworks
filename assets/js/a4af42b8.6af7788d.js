"use strict";(self.webpackChunkOERTemplate=self.webpackChunkOERTemplate||[]).push([[2665],{5088:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>j,frontMatter:()=>c,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"Web-API-Overview/javascript-object-notation-json","title":"JavaScript Object Notation (JSON)","description":"JavaScript Object Notation (JSON)","source":"@site/docs/Web-API-Overview/javascript-object-notation-json.md","sourceDirName":"Web-API-Overview","slug":"/Web-API-Overview/javascript-object-notation-json","permalink":"/WebProgrammingToolsAndFrameworks/Web-API-Overview/javascript-object-notation-json","draft":false,"unlisted":false,"editUrl":"https://github.com/catherine-leung/OERTemplate/tree/main/docs/Web-API-Overview/javascript-object-notation-json.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"javascript-object-notation-json","title":"JavaScript Object Notation (JSON)","sidebar_position":1,"description":"JavaScript Object Notation (JSON)"},"sidebar":"courseNotesSidebar","previous":{"title":"Example Code","permalink":"/WebProgrammingToolsAndFrameworks/Advanced-Routing-Middleware/example-code"},"next":{"title":"AJAX Review","permalink":"/WebProgrammingToolsAndFrameworks/Web-API-Overview/ajax-review"}}');var r=t(4848),a=t(8453);const c={id:"javascript-object-notation-json",title:"JavaScript Object Notation (JSON)",sidebar_position:1,description:"JavaScript Object Notation (JSON)"},i="JavaScript Object Notation (JSON)",s={},l=[{value:"Converting JSON to an Object",id:"converting-json-to-an-object",level:2},{value:"Converting an Object to JSON",id:"converting-an-object-to-json",level:2},{value:"Caveats When Using JSON",id:"caveats-when-using-json",level:2},{value:"Object Instances",id:"object-instances",level:3},{value:"Functions (Methods)",id:"functions-methods",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"javascript-object-notation-json",children:"JavaScript Object Notation (JSON)"})}),"\n",(0,r.jsxs)(n.p,{children:['JSON ("JavaScript Object Notation") is a plain-text format that easily converts to a JavaScript object in memory. Essentially, JSON is a way to define an object using "Object Literal" notation, ',(0,r.jsx)(n.strong,{children:"outside"})," your application. Using the native JavaScript built-in ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON",children:"JSON Object"}),", we can preform the conversion from plain-text (JSON) to JavaScript Object (and vice-versa) easily. For example:"]}),"\n",(0,r.jsx)(n.h2,{id:"converting-json-to-an-object",children:"Converting JSON to an Object"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'let myJSONStr = \'{"users":[{"userId":1,"fName":"Joe","lName":"Smith"},{"userId":2,"fName":"Jeffrey","lName":"Sherman"},{"userId":3,"fName":"Shantell","lName":"McLeod"}]}\';\n\n// Convert to An Object:\nlet myObj = JSON.parse(myJSONStr);\n\n// Access the 3rd user (Shantell McLeod)\nconsole.log(myObj.users[2].fName); // Shantell\n'})}),"\n",(0,r.jsx)(n.h2,{id:"converting-an-object-to-json",children:"Converting an Object to JSON"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'let myObj = {\n  users: [\n    { userId: 1, fName: \'Joe\', lName: \'Smith\' },\n    { userId: 2, fName: \'Jeffrey\', lName: \'Sherman\' },\n    { userId: 3, fName: \'Shantell\', lName: \'McLeod\' },\n  ],\n};\n\nlet myJSON = JSON.stringify(myObj);\n\nconsole.log(myJSON); // Outputs: \'{"users":[{"userId":1,"fName":"Joe","lName":"Smith"},{"userId":2,"fName":"Jeffrey","lName":"Sherman"},{"userId":3,"fName":"Shantell","lName":"McLeod"}]}\'\n'})}),"\n",(0,r.jsx)(n.h2,{id:"caveats-when-using-json",children:"Caveats When Using JSON"}),"\n",(0,r.jsx)(n.p,{children:'The JSON format works exceptionally well to "serialize" (convert an object in memory to a byte / string representation) and "deserialize" (converting back to an object in memory). However, there are certain things that cannot be encoded to JavaScript Object Notation:'}),"\n",(0,r.jsx)(n.h3,{id:"object-instances",children:"Object Instances"}),"\n",(0,r.jsx)(n.p,{children:'Instances of objects in memory cannot be stored in a JSON format. For example, consider the following "product" object:'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"let product = {\n  name: 'Pencil',\n  price: 3.95,\n  added: new Date('December 17, 1995 03:24:00'),\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:['Since the "added" property is an instance of the ',(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",children:"Date"}),' object, we can invoke methods such as "toLocalStimeString()":']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"console.log(product.added.toLocaleTimeString('fr-CA')); // 03 h 24 min 00 s\n"})}),"\n",(0,r.jsx)(n.p,{children:"However, if we convert the product to JSON and back, we lose this ability:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// convert to JSON\nlet productJSON = JSON.stringify(product);\n\n// restore (convert to object)\nlet productFromJSON = JSON.parse(productJSON);\n\nconsole.log(productFromJSON.added.toLocaleTimeString('fr-CA')); // TypeError: productFromJSON.added.toLocaleTimeString is not a function\n"})}),"\n",(0,r.jsx)(n.p,{children:"This issue occurs because during the conversion to JSON, the Date object was implicitly converted to a string:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "name": "Pencil",\n  "price": 3.95,\n  "added": "1995-12-17T08:24:00.000Z"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"functions-methods",children:"Functions (Methods)"}),"\n",(0,r.jsx)(n.p,{children:'Functions ("methods") that exist on the object also will not convert to JSON. For example:'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"let counter = {\n  current: 0,\n  increase: function () {\n    this.current++;\n  },\n};\n\nconsole.log(counter.current); // 0\ncounter.increase();\nconsole.log(counter.current); // 1\n"})}),"\n",(0,r.jsx)(n.p,{children:'Once again, if we attempt to convert this object to JSON and back, we lose the "increase()" function:'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// convert to JSON\nlet counterJSON = JSON.stringify(counter);\n\n// restore (convert to object)\nlet counterFromJSON = JSON.parse(counterJSON);\n\nconsole.log(counterFromJSON.current); // 0\ncounterFromJSON.increase(); // TypeError: counterFromJSON.increase is not a function\n"})}),"\n",(0,r.jsx)(n.p,{children:'In this case, this issue occurs because during the conversion to JSON, the "increase" function was not included:'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{ "current": 0 }\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:['For more information on how values are "stringified", refer to the MDN documentation on ',(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#description",children:'"JSON.stringify()"'})]})})]})}function j(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var o=t(6540);const r={},a=o.createContext(r);function c(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);