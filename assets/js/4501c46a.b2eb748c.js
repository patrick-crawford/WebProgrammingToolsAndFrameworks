"use strict";(self.webpackChunkOERTemplate=self.webpackChunkOERTemplate||[]).push([[5141],{260:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"Advanced-Routing-Middleware/middleware","title":"Middleware","description":"Middleware","source":"@site/docs/Advanced-Routing-Middleware/middleware.md","sourceDirName":"Advanced-Routing-Middleware","slug":"/Advanced-Routing-Middleware/middleware","permalink":"/WebProgrammingToolsAndFrameworks/Advanced-Routing-Middleware/middleware","draft":false,"unlisted":false,"editUrl":"https://github.com/catherine-leung/OERTemplate/tree/main/docs/Advanced-Routing-Middleware/middleware.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"middleware","title":"Middleware","sidebar_position":2,"description":"Middleware"},"sidebar":"courseNotesSidebar","previous":{"title":"Application, Request & Response Objects","permalink":"/WebProgrammingToolsAndFrameworks/Advanced-Routing-Middleware/application-request-response-objects"},"next":{"title":"Example Code","permalink":"/WebProgrammingToolsAndFrameworks/Advanced-Routing-Middleware/example-code"}}');var i=n(4848),t=n(8453);const a={id:"middleware",title:"Middleware",sidebar_position:2,description:"Middleware"},d="Middleware",l={},o=[{value:"Getting Started",id:"getting-started",level:2},{value:"Updating &quot;req&quot;",id:"updating-req",level:3},{value:"Restricting Route Access",id:"restricting-route-access",level:3},{value:"404 Errors",id:"404-errors",level:3},{value:"Types of Middleware",id:"types-of-middleware",level:2},{value:"Application-Level Middleware",id:"application-level-middleware",level:3},{value:"Router-Level Middleware",id:"router-level-middleware",level:3},{value:"Error-Handling Middleware",id:"error-handling-middleware",level:3},{value:"Built-In Middleware",id:"built-in-middleware",level:3},{value:"express.static()",id:"expressstatic",level:4},{value:"express.json()",id:"expressjson",level:4},{value:"express.urlencoded()",id:"expressurlencoded",level:4},{value:"Third-Party Middleware",id:"third-party-middleware",level:3}];function c(e){const r={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"middleware",children:"Middleware"})}),"\n",(0,i.jsx)(r.p,{children:"Middleware in Express refers to functions that can execute in the \u2018middle\u2019 of a request/response cycle typically before a matching route handler function is executed."}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsx)(r.p,{children:"Middleware functions are functions that have access to the request object (req), the response object (res), and the next() function in the application\u2019s request-response cycle. The next() function is a function in the Express router which, when invoked, executes the middleware succeeding the current middleware."}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.a,{href:"http://expressjs.com/en/guide/writing-middleware.html",children:"http://expressjs.com/en/guide/writing-middleware.html"})}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:"By implementing middleware, we can perform tasks such as:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:['Directly modify the "req" (request) or "res" (response) objects ',(0,i.jsx)(r.em,{children:"before"})," processing the route (ie: ",(0,i.jsx)(r.code,{children:"app.get('/', (req, res) => { ... });"}),")"]}),"\n",(0,i.jsx)(r.li,{children:"Redirect the user or respond to requests before other routes are processed"}),"\n",(0,i.jsx)(r.li,{children:"Block clients from accessing specific routes"}),"\n",(0,i.jsx)(r.li,{children:"Log requests / handle logic before processing routes"}),"\n",(0,i.jsxs)(r.li,{children:["Respond to requests for routes that ",(0,i.jsx)(r.em,{children:"do not exist"}),' (ie: generate "404" errors)']}),"\n",(0,i.jsx)(r.li,{children:'Handle exceptions that occur during the processing of a route handler (ie: generate "500" series errors)'}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,i.jsxs)(r.p,{children:["To implement middleware in our servers, we will begin by writing a simple middleware function that logs every request to the console. This function will be placed ",(0,i.jsx)(r.strong,{children:"before"})," any of our route handlers, ensuring that it gets executed for every request:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-js",children:"app.use((req, res, next) => {\n  console.log(`Request from: ${req.get('user-agent')} [${new Date()}]`);\n  next();\n});\n"})}),"\n",(0,i.jsxs)(r.p,{children:["Notice how we make use of the aforementioned ",(0,i.jsx)(r.a,{href:"https://expressjs.com/en/api.html#app.use",children:"app.use()"})," method to implement our middleware function. It looks very similar to a regular route handler, except it accepts a third parameter: ",(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.em,{children:"next"})}),' and (in this case) does not return anything to the client. It is because this function does not return anything to the client (ie: generate a "response"), that we must use the "next()" function - it simply calls the next middleware function, such as a route handler, ie:']}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-js",children:"app.get('/', (req, res) => {\n  res.send('Hello World');\n});\n"})}),"\n",(0,i.jsx)(r.admonition,{type:"caution",children:(0,i.jsxs)(r.p,{children:["If we fail to invoke the ",(0,i.jsx)(r.strong,{children:"next()"})," function or return a response, our server will hang and the client request will timeout."]})}),"\n",(0,i.jsx)(r.h3,{id:"updating-req",children:'Updating "req"'}),"\n",(0,i.jsx)(r.p,{children:'Let\'s continue the example by updating the "req" object in our middleware example to include a "log" property that simply stores the output of the log entry as a string. We can use this value in a subsequent route handler and send it back to the client, ie:'}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-js",children:"app.use((req, res, next) => {\n  let loggedItem = `Request from: ${req.get('user-agent')} [${new Date()}]`;\n  console.log(loggedItem);\n  req.log = loggedItem;\n  next();\n});\n\napp.get('/', (req, res) => {\n  res.send(`Hello - ${req.log}`);\n});\n"})}),"\n",(0,i.jsx)(r.h3,{id:"restricting-route-access",children:"Restricting Route Access"}),"\n",(0,i.jsxs)(r.p,{children:["Another common use for middleware is to ",(0,i.jsx)(r.strong,{children:"restrict"})," route access for a specific route. This can be be accomplished by placing your middleware function as a ",(0,i.jsx)(r.em,{children:"parameter"})," to the route handling function that requires restricted access. For example:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-js",children:"function randomDeny(req, res, next) {\n  let allowed = Math.floor(Math.random() * 2); // 0 or 1\n\n  if (allowed) {\n    next();\n  } else {\n    res.status(403).send('Access Denied');\n  }\n}\n\napp.get('/secure', randomDeny, (req, res) => {\n  res.send('Welcome!');\n});\n"})}),"\n",(0,i.jsxs)(r.p,{children:['Here, we have implemented our middleware function as "randomDeny", which randomly generates either a 0 or 1. If a 1 is generated, the "next()" function is invoked, allowing the route to be processed as normal. However, if a 0 is generated, a response, including the ',(0,i.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403",children:"403 - Forbidden"}),' error code is generated, informing the user that they do not have access (we could also redirect them to a "login" or "register" page, etc).']}),"\n",(0,i.jsxs)(r.p,{children:['To ensure that this middleware function only affects the "/secure" route, we place it as the second parameter ',(0,i.jsx)(r.em,{children:"before"})," the callback function."]}),"\n",(0,i.jsx)(r.h3,{id:"404-errors",children:"404 Errors"}),"\n",(0,i.jsx)(r.p,{children:'As a final example of how to implement middleware in our server.js code - let\'s create a custom "404" error to send to the client if it has requested an unknown route (ie: a route that we have not created a handler for):'}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-js",children:"// Other route handlers, middleware, etc ...\n\napp.use((req, res, next) => {\n  res.status(404).send(\"404 - We're unable to find what you're looking for.\");\n});\n\n// app.listen()\n"})}),"\n",(0,i.jsxs)(r.p,{children:['Here, we have created a middleware function using the familiar "use()" function. However, the main difference is where it is placed, ie: ',(0,i.jsx)(r.em,{children:"below"})," all of our other middleware functions / route handlers. By placing it in this way, we can ensure that it ",(0,i.jsx)(r.em,{children:"only"})," gets executed if none of the other route handlers return a response to the client."]}),"\n",(0,i.jsx)(r.h2,{id:"types-of-middleware",children:"Types of Middleware"}),"\n",(0,i.jsx)(r.p,{children:"Now that we have seen how middleware is typically implemented within an Express application, let's quickly review the 5 types of middleware available:"}),"\n",(0,i.jsx)(r.h3,{id:"application-level-middleware",children:"Application-Level Middleware"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.a,{href:"http://expressjs.com/en/guide/using-middleware.html#middleware.application",children:"Application-level middleware"})," is bound to your entire application and can run when every request comes in or only when it matches a specified route."]}),"\n",(0,i.jsx)(r.p,{children:'In the examples above, we have implemented "Application-level middleware".'}),"\n",(0,i.jsx)(r.h3,{id:"router-level-middleware",children:"Router-Level Middleware"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.a,{href:"http://expressjs.com/en/guide/using-middleware.html#middleware.router",children:"Router-level middleware"}),' works the same way as application middleware but is attached to a separate router instance. Essentially, instead of "app.use()", a separate ',(0,i.jsx)(r.code,{children:"express.Router()"})," instance is created and the middleware is applied to it, ie:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-js",children:"const userRouter = express.Router();\n\nuserRouter.use((req, res, next) => {\n  console.log('userRouter Middleware!');\n  next();\n});\n"})}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:["For more information on express.Router(), see the official documentation in the official Express ",(0,i.jsx)(r.a,{href:"https://expressjs.com/en/guide/routing.html",children:"Routing"})," documentation."]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"error-handling-middleware",children:"Error-Handling Middleware"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.a,{href:"http://expressjs.com/en/guide/using-middleware.html#middleware.error-handling",children:"Error-handling middleware"}),' is defined with 4 parameters in the callback function, ie: (err, req, res, next). We must specify all 4 parameters so that express can differentiate it from a regular middleware function. Error handling middleware is invoked either when a regular middleware function calls next(err) instead of next(), or when exceptions occur in your route handlers. Like our "404" example above, error handling middleware should be placed ',(0,i.jsx)(r.em,{children:"below"})," your route handlers. For example:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-js",children:"app.get('/error-test', (req, res) => {\n  throw new Error('Error Test');\n});\n\napp.use((err, req, res, next) => {\n  res.status(500).send(`500 - ${err.message}`);\n});\n"})}),"\n",(0,i.jsx)(r.h3,{id:"built-in-middleware",children:"Built-In Middleware"}),"\n",(0,i.jsxs)(r.p,{children:["There are three types of ",(0,i.jsx)(r.a,{href:"http://expressjs.com/en/guide/using-middleware.html#middleware.built-in",children:"built-in middleware"})," functions available for us to use:"]}),"\n",(0,i.jsx)(r.h4,{id:"expressstatic",children:"express.static()"}),"\n",(0,i.jsxs)(r.p,{children:['This is what we used when sending "static" files (ie: "css" files, images, etc) in the ',(0,i.jsx)(r.a,{href:"/WebProgrammingToolsAndFrameworks/Web-Server-Introduction/simple-web-server-using-expressjs#css--images",children:'"CSS & Images"'}),' section of the "Simple Web Server using Express.js" notes, ie:']}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-js",children:"app.use(express.static('public'));\n"})}),"\n",(0,i.jsx)(r.h4,{id:"expressjson",children:"express.json()"}),"\n",(0,i.jsx)(r.p,{children:'This is used to parse "JSON" formatted payloads, and make the result available on the "req" object. For example:'}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-js",children:"app.use(express.json());\n\napp.post('/json-test', (req, res) => {\n  res.send(req.body);\n});\n"})}),"\n",(0,i.jsx)(r.h4,{id:"expressurlencoded",children:"express.urlencoded()"}),"\n",(0,i.jsx)(r.p,{children:'This is nearly identical to "express.json", except this is used to parse data from a web form using the default "enctype", (ie: "application/x-www-form-urlencoded").'}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-js",children:"app.use(express.urlencoded({ extended: true }));\n\napp.post('/urlencoded-test', (req, res) => {\n  res.send(req.body);\n});\n"})}),"\n",(0,i.jsx)(r.admonition,{type:"info",children:(0,i.jsxs)(r.p,{children:['The \u201cextended\u201d option utilizes the "qs" library which enables rich objects and arrays to be encoded into the URL-encoded format, allowing for a JSON-like experience with URL-encoded. For more information, please see the ',(0,i.jsx)(r.a,{href:"https://www.npmjs.org/package/qs#readme",children:"qs library"}),"."]})}),"\n",(0,i.jsx)(r.h3,{id:"third-party-middleware",children:"Third-Party Middleware"}),"\n",(0,i.jsxs)(r.p,{children:["Since Express 4.x, previously included middleware that did common things such as handle cookies, or handle file uploads, have been moved to individual ",(0,i.jsx)(r.a,{href:"https://expressjs.com/en/guide/using-middleware.html#middleware.third-party",children:"third-party middleware"})," packages."]}),"\n",(0,i.jsxs)(r.p,{children:["For example, parsing cookies requires the installation of ",(0,i.jsx)(r.a,{href:"https://expressjs.com/en/resources/middleware/cookie-parser.html",children:"cookie-parser"}),":"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"$ npm install cookie-parser\n"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-js",children:"const cookieParser = require('cookie-parser');\n\n// load the cookie-parsing middleware\napp.use(cookieParser());\n"})}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:["For a list of supported, third party middleware, refer to the ",(0,i.jsx)(r.a,{href:"http://expressjs.com/en/resources/middleware.html",children:"official documentation"}),"."]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>d});var s=n(6540);const i={},t=s.createContext(i);function a(e){const r=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(t.Provider,{value:r},e.children)}}}]);