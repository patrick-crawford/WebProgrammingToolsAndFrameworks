"use strict";(self.webpackChunkOERTemplate=self.webpackChunkOERTemplate||[]).push([[1104],{4836:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"Template-Engines/introduction","title":"Introduction","description":"Introduction","source":"@site/docs/Template-Engines/introduction.md","sourceDirName":"Template-Engines","slug":"/Template-Engines/introduction","permalink":"/WebProgrammingToolsAndFrameworks/Template-Engines/introduction","draft":false,"unlisted":false,"editUrl":"https://github.com/catherine-leung/OERTemplate/tree/main/docs/Template-Engines/introduction.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"introduction","title":"Introduction","sidebar_position":1,"description":"Introduction"},"sidebar":"courseNotesSidebar","previous":{"title":"Example Code","permalink":"/WebProgrammingToolsAndFrameworks/Web-API-Overview/example-code"},"next":{"title":"EJS (Embedded JavaScript Templates)","permalink":"/WebProgrammingToolsAndFrameworks/Template-Engines/ejs-embedded-javaScript-templates"}}');var o=n(4848),r=n(8453);const s={id:"introduction",title:"Introduction",sidebar_position:1,description:"Introduction"},i="Introduction",l={},c=[{value:"Returning HTML &amp; Data",id:"returning-html--data",level:2},{value:"Template Engines",id:"template-engines",level:2}];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,o.jsx)(t.p,{children:'Express.js is a powerful library for helping us create web servers in Node.js. In very few lines of code we can send / receive data in a way that is very straightforward and easy to understand. Recall our first example, where we were able to create two routes: "/" and "/about", each corresponding to a specific response from our server:'}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"const express = require('express');\nconst app = express();\nconst path = require('path');\n\nconst HTTP_PORT = process.env.PORT || 8080;\n\napp.get('/', (req, res) => {\n  res.send(\"Hello World<br /><a href='/about'>Go to the about page</a>\");\n});\n\napp.get('/about', (req, res) => {\n  res.sendFile(path.join(__dirname, '/views/about.html'));\n});\n\napp.listen(HTTP_PORT, () => {\n  console.log(`server listening on: ${HTTP_PORT}`);\n});\n"})}),"\n",(0,o.jsxs)(t.p,{children:["In the above example, we make use of the ",(0,o.jsx)(t.strong,{children:"get"}),' method of the app object to define a route and a callback function that\'s executed when the route is encountered. We can leverage the 2nd parameter "res" to send either an HTML formatted string (for route "/"), or a static html page (for route "/about").']}),"\n",(0,o.jsx)(t.p,{children:"If we wanted to send (JSON formatted) data only, we can use the following route (/getData):"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"app.get('/getData', function (req, res) {\n  let someData = {\n    name: 'John',\n    age: 23,\n    occupation: 'developer',\n    company: 'Scotiabank',\n  };\n\n  res.send(someData);\n});\n"})}),"\n",(0,o.jsx)(t.p,{children:"This will return the JSON-formatted string:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-json",children:'{ "name": "John", "age": 23, "occupation": "developer", "company": "Scotiabank" }\n'})}),"\n",(0,o.jsx)(t.p,{children:"The important thing to notice here is that our server can return HTML formatted strings, static HTML (.html) files, and JSON data."}),"\n",(0,o.jsx)(t.h2,{id:"returning-html--data",children:"Returning HTML & Data"}),"\n",(0,o.jsxs)(t.p,{children:["If we want to return a valid HTML5 page to the client that actually references data stored on the server, one solution would be to build a string that contains both ",(0,o.jsx)(t.strong,{children:"HTML code"})," and ",(0,o.jsx)(t.strong,{children:"data"}),", ie:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"app.get('/viewData', function (req, res) {\n  let someData = {\n    name: 'John',\n    age: 23,\n    occupation: 'developer',\n    company: 'Scotiabank',\n  };\n\n  let htmlString = `<!doctype html>  \n                  <html> \n                      <head>  \n                          <title>View Data</title> \n                      </head> \n                      <body>  \n                          <table border='1'>  \n                              <tr>  \n                                  <th>Name</th>  \n                                  <th>Age</th>  \n                                  <th>Occupation</th>  \n                                  <th>Company</th>  \n                              </tr>  \n                              <tr>  \n                                  <td>${someData.name}</td>  \n                                  <td>${someData.age}</td>  \n                                  <td>${someData.occupation}</td>  \n                                  <td>${someData.company}</td>  \n                              </tr>  \n                          </table>  \n                      </body>  \n                  </html>`;\n\n  res.send(htmlString);\n});\n"})}),"\n",(0,o.jsxs)(t.p,{children:["While this will work to send a valid HTML5 page containing our data back to the client, it's clearly not the best way to approach this problem. What if we had a complex page that contains data in different places throughout the layout? We would be building out an enormous string containing normal, static html and in a few places, inserting a reference to our data (someData object). Wouldn't it be better if we could just write a normal HTML document that ",(0,o.jsx)(t.strong,{children:"references"})," the data, instead of having to build one huge string for the whole page?"]}),"\n",(0,o.jsx)(t.h2,{id:"template-engines",children:"Template Engines"}),"\n",(0,o.jsxs)(t.p,{children:["Fortunately, we can leverage ",(0,o.jsx)(t.a,{href:"https://expressjs.com/en/guide/using-template-engines.html",children:'"template engines" with Express'})," to solve this exact problem. From the express.js documentation:"]}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsx)(t.p,{children:"A template engine enables you to use static template files in your application. At runtime, the template engine replaces variables in a template file with actual values, and transforms the template into an HTML file sent to the client. This approach makes it easier to design an HTML page."}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"This sounds like exactly what we need and there are a number of popular options that we can choose from, such as:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"https://pugjs.org/api/getting-started.html",children:'"Pug"'})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"https://www.npmjs.com/package/express-handlebars",children:'"Express Handlebars"'})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"https://ejs.co",children:'"EJS"'})}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:'In the next section, we will take a look at "EJS":'}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsx)(t.p,{children:"A simple templating language that lets you generate HTML markup with plain JavaScript. No religiousness about how to organize things. No reinvention of iteration and control-flow. It's just plain JavaScript."}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var a=n(6540);const o={},r=a.createContext(o);function s(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);